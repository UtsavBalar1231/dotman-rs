#compdef dot
# Enhanced Zsh completion for dotman (dot)
# Provides dynamic completions for branches, remotes, commits, config keys, and files

# Helper function to get branches
_dot_get_branches() {
    local branches
    if [[ -d "$HOME/.dotman" ]]; then
        branches=(${(f)"$(dot branch list 2>/dev/null | grep '^\*\|^  ' | sed 's/^[* ] //' | grep -v '^$')"})
        _describe -t branches 'branches' branches
    fi
}

# Helper function to get remotes
_dot_get_remotes() {
    local remotes
    if [[ -d "$HOME/.dotman" ]]; then
        remotes=(${(f)"$(dot remote list 2>/dev/null | grep -v '^$')"})
        _describe -t remotes 'remotes' remotes
    fi
}

# Helper function to get recent commits (last 20)
_dot_get_commits() {
    local commits
    if [[ -d "$HOME/.dotman" ]]; then
        # Get commit IDs and their first line of message
        commits=(${(f)"$(dot log --oneline -n 20 2>/dev/null | awk '{print $1}')"})
        _describe -t commits 'commits' commits
    fi
}

# Helper function to get config keys
_dot_get_config_keys() {
    local config_keys=(
        'user.name:Set user name for commits'
        'user.email:Set user email for commits'
        'core.compression:Enable/disable compression'
        'core.compression_level:Set compression level (1-22)'
        'core.default_branch:Set default branch name'
        'performance.parallel_threads:Number of parallel threads'
        'performance.mmap_threshold:Memory-mapped I/O threshold'
        'performance.cache_size:Cache size in MB'
        'performance.use_hard_links:Enable hard links'
        'tracking.follow_symlinks:Follow symbolic links'
        'tracking.preserve_permissions:Preserve file permissions'
    )
    _describe -t config-keys 'config keys' config_keys
}

# Helper function to get untracked files
_dot_get_untracked_files() {
    local untracked
    if [[ -d "$HOME/.dotman" ]]; then
        untracked=(${(f)"$(dot status --untracked 2>/dev/null | grep '^?' | awk '{print $2}')"})
        if [[ ${#untracked} -gt 0 ]]; then
            _describe -t untracked-files 'untracked files' untracked
        fi
    fi
    _files
}

# Helper function to get tracked files
_dot_get_tracked_files() {
    local tracked
    if [[ -d "$HOME/.dotman" ]]; then
        tracked=(${(f)"$(dot status 2>/dev/null | grep -E '^(M|A|D)' | awk '{print $2}')"})
        if [[ ${#tracked} -gt 0 ]]; then
            _describe -t tracked-files 'tracked files' tracked
        fi
    fi
}

# Helper function to get current branch
_dot_get_current_branch() {
    if [[ -d "$HOME/.dotman" ]]; then
        dot branch list 2>/dev/null | grep '^\*' | sed 's/^[* ] //'
    fi
}

# Main completion function
_dot() {
    local context state state_descr line
    typeset -A opt_args
    
    local -a commands
    commands=(
        'add:Add files to be tracked'
        'status:Show the working tree status'
        'commit:Record changes to the repository'
        'checkout:Switch branches or restore working tree files'
        'reset:Reset current HEAD to the specified state'
        'push:Update remote refs along with associated objects'
        'pull:Fetch from and integrate with another repository'
        'init:Initialize a new dotman repository'
        'show:Show various types of objects'
        'log:Show commit logs'
        'diff:Show changes between commits'
        'rm:Remove files from tracking'
        'remote:Manage remote repositories'
        'branch:Manage branches'
        'config:Get and set repository or user options'
        'completion:Generate shell completion scripts'
        'help:Show help for a command'
    )
    
    _arguments -C \
        '1:command:->command' \
        '*::arg:->args'
    
    case $state in
        command)
            _describe -t commands 'dot command' commands
            ;;
        args)
            case $line[1] in
                add)
                    _arguments \
                        '(-f --force)'{-f,--force}'[Force adding files]' \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '*:files:_dot_get_untracked_files'
                    ;;
                
                status)
                    _arguments \
                        '(-s --short)'{-s,--short}'[Show short format]' \
                        '(-u --untracked)'{-u,--untracked}'[Show untracked files]' \
                        '(-h --help)'{-h,--help}'[Show help]'
                    ;;
                
                commit)
                    _arguments \
                        '(-m --message)'{-m,--message}'[Commit message]:message:' \
                        '(-a --all)'{-a,--all}'[Commit all tracked files]' \
                        '(-h --help)'{-h,--help}'[Show help]'
                    ;;
                
                checkout)
                    _arguments \
                        '(-f --force)'{-f,--force}'[Force checkout]' \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '1:target:->checkout_target'
                    
                    case $state in
                        checkout_target)
                            _alternative \
                                'branches:branch:_dot_get_branches' \
                                'commits:commit:_dot_get_commits' \
                                'head:HEAD:(HEAD)'
                            ;;
                    esac
                    ;;
                
                reset)
                    _arguments \
                        '--hard[Reset working tree and index]' \
                        '--soft[Reset only HEAD]' \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '1:commit:->reset_target'
                    
                    case $state in
                        reset_target)
                            _alternative \
                                'commits:commit:_dot_get_commits' \
                                'branches:branch:_dot_get_branches' \
                                'head:HEAD:(HEAD)'
                            ;;
                    esac
                    ;;
                
                push)
                    _arguments \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '1:remote:_dot_get_remotes' \
                        '2:branch:_dot_get_branches'
                    ;;
                
                pull)
                    _arguments \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '1:remote:_dot_get_remotes' \
                        '2:branch:_dot_get_branches'
                    ;;
                
                init)
                    _arguments \
                        '(-b --bare)'{-b,--bare}'[Create a bare repository]' \
                        '(-h --help)'{-h,--help}'[Show help]'
                    ;;
                
                show)
                    _arguments \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '1:object:->show_object'
                    
                    case $state in
                        show_object)
                            _alternative \
                                'commits:commit:_dot_get_commits' \
                                'branches:branch:_dot_get_branches' \
                                'head:HEAD:(HEAD)'
                            ;;
                    esac
                    ;;
                
                log)
                    _arguments \
                        '(-n --limit)'{-n,--limit}'[Number of commits to show]:number:(5 10 20 50 100)' \
                        '--oneline[Show in oneline format]' \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '::target:->log_target'
                    
                    case $state in
                        log_target)
                            _alternative \
                                'branches:branch:_dot_get_branches' \
                                'commits:commit:_dot_get_commits' \
                                'head:HEAD:(HEAD)'
                            ;;
                    esac
                    ;;
                
                diff)
                    _arguments \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '1:from:->diff_from' \
                        '2:to:->diff_to'
                    
                    case $state in
                        diff_from|diff_to)
                            _alternative \
                                'commits:commit:_dot_get_commits' \
                                'branches:branch:_dot_get_branches' \
                                'head:HEAD:(HEAD)'
                            ;;
                    esac
                    ;;
                
                rm)
                    _arguments \
                        '(-c --cached)'{-c,--cached}'[Remove from index only]' \
                        '(-f --force)'{-f,--force}'[Force removal]' \
                        '(-i --interactive)'{-i,--interactive}'[Interactive removal]' \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '*:files:_files'
                    ;;
                
                remote)
                    local -a remote_commands
                    remote_commands=(
                        'list:List all remotes'
                        'add:Add a new remote'
                        'remove:Remove a remote'
                        'set-url:Set the URL for a remote'
                        'show:Show information about a remote'
                        'rename:Rename a remote'
                    )
                    
                    _arguments -C \
                        '1:subcommand:->remote_command' \
                        '*::arg:->remote_args'
                    
                    case $state in
                        remote_command)
                            _describe -t remote-commands 'remote command' remote_commands
                            ;;
                        remote_args)
                            case $line[1] in
                                add)
                                    _arguments \
                                        '(-h --help)'{-h,--help}'[Show help]' \
                                        '1:name:' \
                                        '2:url:'
                                    ;;
                                remove|show)
                                    _arguments \
                                        '(-h --help)'{-h,--help}'[Show help]' \
                                        '1:remote:_dot_get_remotes'
                                    ;;
                                set-url)
                                    _arguments \
                                        '(-h --help)'{-h,--help}'[Show help]' \
                                        '1:remote:_dot_get_remotes' \
                                        '2:url:'
                                    ;;
                                rename)
                                    _arguments \
                                        '(-h --help)'{-h,--help}'[Show help]' \
                                        '1:old-name:_dot_get_remotes' \
                                        '2:new-name:'
                                    ;;
                                list)
                                    _arguments \
                                        '(-h --help)'{-h,--help}'[Show help]'
                                    ;;
                            esac
                            ;;
                    esac
                    ;;
                
                branch)
                    local -a branch_commands
                    branch_commands=(
                        'list:List all branches'
                        'create:Create a new branch'
                        'delete:Delete a branch'
                        'rename:Rename a branch'
                        'set-upstream:Set upstream tracking for a branch'
                        'unset-upstream:Remove upstream tracking for a branch'
                    )
                    
                    _arguments -C \
                        '1:subcommand:->branch_command' \
                        '*::arg:->branch_args'
                    
                    case $state in
                        branch_command)
                            _describe -t branch-commands 'branch command' branch_commands
                            ;;
                        branch_args)
                            case $line[1] in
                                create)
                                    _arguments \
                                        '(-f --from)'{-f,--from}'[Starting point]:ref:->create_from' \
                                        '(-h --help)'{-h,--help}'[Show help]' \
                                        '1:name:'
                                    
                                    case $state in
                                        create_from)
                                            _alternative \
                                                'branches:branch:_dot_get_branches' \
                                                'commits:commit:_dot_get_commits' \
                                                'head:HEAD:(HEAD)'
                                            ;;
                                    esac
                                    ;;
                                delete)
                                    local current_branch=$(_dot_get_current_branch)
                                    local branches
                                    if [[ -d "$HOME/.dotman" ]]; then
                                        branches=(${(f)"$(dot branch list 2>/dev/null | grep '^\*\|^  ' | sed 's/^[* ] //' | grep -v "^$current_branch$" | grep -v '^$')"})
                                        _arguments \
                                            '(-f --force)'{-f,--force}'[Force deletion]' \
                                            '(-h --help)'{-h,--help}'[Show help]' \
                                            '1:branch:(${branches})'
                                    else
                                        _arguments \
                                            '(-f --force)'{-f,--force}'[Force deletion]' \
                                            '(-h --help)'{-h,--help}'[Show help]'
                                    fi
                                    ;;
                                rename)
                                    _arguments \
                                        '(-h --help)'{-h,--help}'[Show help]' \
                                        '1:old-name:_dot_get_branches' \
                                        '2:new-name:'
                                    ;;
                                set-upstream)
                                    _arguments \
                                        '(-b --branch)'{-b,--branch}'[Branch name]:branch:_dot_get_branches' \
                                        '--remote-branch[Remote branch name]:branch:' \
                                        '(-h --help)'{-h,--help}'[Show help]' \
                                        '1:remote:_dot_get_remotes'
                                    ;;
                                unset-upstream)
                                    _arguments \
                                        '(-h --help)'{-h,--help}'[Show help]' \
                                        '::branch:_dot_get_branches'
                                    ;;
                                list)
                                    _arguments \
                                        '(-h --help)'{-h,--help}'[Show help]'
                                    ;;
                            esac
                            ;;
                    esac
                    ;;
                
                config)
                    _arguments \
                        '--unset[Unset the configuration key]' \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '1:key:_dot_get_config_keys' \
                        '::value:'
                    ;;
                
                completion)
                    local -a shells
                    shells=(
                        'bash:Bash shell'
                        'zsh:Zsh shell'
                        'fish:Fish shell'
                        'powershell:PowerShell'
                        'elvish:Elvish shell'
                    )
                    _arguments \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '1:shell:(bash zsh fish powershell elvish)'
                    ;;
            esac
            ;;
    esac
}

# Register the completion function
_dot "$@"

# Also preserve the basic completion as a fallback
if [[ -f "${0:h}/_dot" ]]; then
    # Try to load the basic completion but don't override our enhanced one
    autoload -Uz _dot_basic 2>/dev/null || true
fi