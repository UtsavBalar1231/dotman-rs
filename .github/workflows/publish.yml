name: Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.2.3)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run (do not actually publish)'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io

jobs:
  # Publish to crates.io
  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    if: github.repository_owner == 'UtsavBalar' # Only publish from official repository
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Verify version consistency
        run: |
          CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          
          if [[ "${{ github.event_name }}" == "release" ]]; then
            TAG_VERSION="${{ github.event.release.tag_name }}"
            TAG_VERSION="${TAG_VERSION#v}"
          else
            TAG_VERSION="${{ github.event.inputs.version }}"
          fi
          
          if [[ "$CARGO_VERSION" != "$TAG_VERSION" ]]; then
            echo "❌ Version mismatch: Cargo.toml has $CARGO_VERSION, but tag/input has $TAG_VERSION"
            exit 1
          fi
          
          echo "✅ Version check passed: $CARGO_VERSION"

      - name: Run tests before publishing
        run: cargo test --all-features

      - name: Check package can be built
        run: cargo package --allow-dirty

      - name: Publish to crates.io (dry run)
        if: github.event.inputs.dry_run == 'true'
        run: cargo publish --dry-run --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish to crates.io
        if: github.event.inputs.dry_run != 'true'
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Build and publish Docker images
  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    if: github.repository_owner == 'UtsavBalar' # Only publish from official repository
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository }}
            ${{ github.repository_owner }}/dotman
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containers/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event.inputs.dry_run != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.event.release.tag_name || github.event.inputs.version }}
            VCS_REF=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Build and push Alpine Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containers/Dockerfile.alpine
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event.inputs.dry_run != 'true' }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}:alpine
            ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.release.tag_name || github.event.inputs.version }}-alpine
            ${{ github.repository_owner }}/dotman:alpine
            ${{ github.repository_owner }}/dotman:${{ github.event.release.tag_name || github.event.inputs.version }}-alpine
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.event.release.tag_name || github.event.inputs.version }}
            VCS_REF=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # Publish Homebrew formula
  publish-homebrew:
    name: Update Homebrew Formula
    runs-on: macos-latest
    needs: publish-crate
    if: github.event_name == 'release' && !github.event.release.prerelease && github.repository_owner == 'UtsavBalar'
    
    steps:
      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: dotman
          formula-path: packaging/homebrew/dotman.rb
          homebrew-tap: ${{ github.repository_owner }}/homebrew-tap
          base-branch: main
          download-url: https://github.com/${{ github.repository }}/archive/${{ github.event.release.tag_name }}.tar.gz
          commit-message: |
            Update dotman to ${{ github.event.release.tag_name }}
            
            Generated by GitHub Actions
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  # Update package repositories
  update-packages:
    name: Update Package Repositories
    runs-on: ubuntu-latest
    needs: [publish-crate, publish-docker]
    if: github.event_name == 'release' && !github.event.release.prerelease && github.repository_owner == 'UtsavBalar'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update AUR package
        run: |
          # This would typically clone the AUR repository, update PKGBUILD, and push
          echo "AUR package update would be triggered here"
          echo "Version: ${{ github.event.release.tag_name }}"
          echo "Download URL: https://github.com/${{ github.repository }}/archive/${{ github.event.release.tag_name }}.tar.gz"

      - name: Notify package maintainers
        uses: actions/github-script@v6
        with:
          script: |
            const maintainers = [
              // Add package maintainer GitHub usernames here
            ];
            
            const version = '${{ github.event.release.tag_name }}';
            const releaseUrl = '${{ github.event.release.html_url }}';
            
            const message = `🚀 dotman ${version} has been released!
            
            **Release**: ${releaseUrl}
            
            Package maintainers, please consider updating your packages to the latest version.
            
            **Download URL**: https://github.com/${{ github.repository }}/archive/${version}.tar.gz
            
            **Checksums**: Available in the release assets.`;
            
            for (const maintainer of maintainers) {
              try {
                await github.rest.issues.create({
                  owner: maintainer,
                  repo: 'packages', // Adjust based on maintainer's repo structure
                  title: `Update dotman to ${version}`,
                  body: message,
                });
                console.log(`Notified ${maintainer}`);
              } catch (error) {
                console.log(`Failed to notify ${maintainer}: ${error.message}`);
              }
            }

  # Publish to Winget (Windows Package Manager)
  publish-winget:
    name: Update Winget Package
    runs-on: ubuntu-latest
    needs: publish-crate
    if: github.event_name == 'release' && !github.event.release.prerelease && github.repository_owner == 'UtsavBalar'
    
    steps:
      - name: Submit to Winget
        uses: vedantmgoyal2009/winget-releaser@v2
        with:
          identifier: UtsavBalar.dotman
          installers-regex: 'dotman.*windows.*\.zip$'
          token: ${{ secrets.WINGET_TOKEN }}
          fork-user: ${{ github.repository_owner }}

  # Generate and publish documentation
  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: publish-crate
    if: github.event_name == 'release' && !github.event.release.prerelease
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Generate documentation
        run: |
          cargo doc --no-deps --all-features
          
          # Create index.html that redirects to main documentation
          cat > target/doc/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta http-equiv="refresh" content="0; url=dotman/">
              <title>dotman Documentation</title>
          </head>
          <body>
              <p>Redirecting to <a href="dotman/">dotman documentation</a>...</p>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: target/doc

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3

  # Publication summary
  publish-summary:
    name: Publication Summary
    runs-on: ubuntu-latest
    needs: [publish-crate, publish-docker, publish-homebrew, update-packages, publish-winget, publish-docs]
    if: always()
    
    steps:
      - name: Create publication summary
        run: |
          echo "# Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.publish-crate.result }}" == "success" ]]; then
            echo "✅ **crates.io**: Published successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **crates.io**: ${{ needs.publish-crate.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.publish-docker.result }}" == "success" ]]; then
            echo "✅ **Docker**: Published successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker**: ${{ needs.publish-docker.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.publish-homebrew.result }}" == "success" ]]; then
            echo "✅ **Homebrew**: Updated successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.publish-homebrew.result }}" == "skipped" ]]; then
            echo "⏭️ **Homebrew**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Homebrew**: ${{ needs.publish-homebrew.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.publish-winget.result }}" == "success" ]]; then
            echo "✅ **Winget**: Submitted successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.publish-winget.result }}" == "skipped" ]]; then
            echo "⏭️ **Winget**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Winget**: ${{ needs.publish-winget.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.publish-docs.result }}" == "success" ]]; then
            echo "✅ **Documentation**: Published successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.publish-docs.result }}" == "skipped" ]]; then
            echo "⏭️ **Documentation**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Documentation**: ${{ needs.publish-docs.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Installation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The package is now available through multiple channels:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Cargo**: \`cargo install dotman\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker**: \`docker pull ghcr.io/${{ github.repository }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Homebrew**: \`brew install dotman\` (macOS)" >> $GITHUB_STEP_SUMMARY
          echo "- **Winget**: \`winget install UtsavBalar.dotman\` (Windows)" >> $GITHUB_STEP_SUMMARY