name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run CI daily at 02:00 UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: check-${{ runner.os }}

      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy linting
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: "-D warnings"

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta, 1.70.0] # MSRV (Minimum Supported Rust Version)
        exclude:
          # Reduce CI load - only test MSRV on Ubuntu
          - os: macos-latest
            rust: 1.70.0
          - os: windows-latest
            rust: 1.70.0
          # Beta testing only on Ubuntu
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.os }}-${{ matrix.rust }}

      - name: Build project
        run: cargo build --verbose --all-features

      - name: Run unit tests
        run: cargo test --verbose --all-features

      - name: Run integration tests
        run: cargo test --verbose --test integration_test

      - name: Run property-based tests
        run: cargo test --verbose --test property_based_tests
        continue-on-error: true # Property tests can be flaky

      - name: Test without default features
        run: cargo test --verbose --no-default-features

  cross-compile:
    name: Cross Compilation
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cross-compilation tool
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: cross-${{ matrix.target }}

      - name: Build for target
        run: cross build --release --target ${{ matrix.target }}

      - name: Test for target (if supported)
        run: cross test --release --target ${{ matrix.target }}
        continue-on-error: true # Some targets might not support testing

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: bench-${{ runner.os }}

      - name: Run benchmarks
        run: cargo bench --no-run # Build benchmarks without running (for CI speed)

      - name: Run lightweight benchmark
        run: timeout 300 cargo bench || echo "Benchmarks completed or timed out"

  memory-safety:
    name: Memory Safety (Miri)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust nightly with Miri
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: miri-${{ runner.os }}

      - name: Run Miri on core functionality
        run: cargo miri test --lib
        env:
          MIRIFLAGS: -Zmiri-strict-provenance

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: coverage-${{ runner.os }}

      - name: Generate coverage report
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true

  # Build optimized release binaries for major platforms
  build-release:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dotman-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: dotman-linux-x86_64-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: dotman-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dotman-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dotman-macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install cross-compilation tool
        if: matrix.target != 'x86_64-apple-darwin' && matrix.target != 'aarch64-apple-darwin' && runner.os == 'Linux'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}

      - name: Build release binary (native)
        if: (matrix.target == 'x86_64-apple-darwin' && runner.os == 'macOS') || (matrix.target == 'aarch64-apple-darwin' && runner.os == 'macOS')
        run: |
          cargo build --release --target ${{ matrix.target }}
          cp target/${{ matrix.target }}/release/dot ${{ matrix.artifact_name }}

      - name: Build release binary (cross)
        if: runner.os == 'Linux'
        run: |
          cross build --release --target ${{ matrix.target }}
          cp target/${{ matrix.target }}/release/dot ${{ matrix.artifact_name }}

      - name: Strip binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: strip ${{ matrix.artifact_name }}

      - name: Upload release artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}
          retention-days: 7

  # Comprehensive check that all CI jobs passed
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [check, test, cross-compile, memory-safety]
    if: always()
    
    steps:
      - name: Check all jobs success
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1
      
      - name: CI Success
        run: echo "All CI checks passed successfully!"