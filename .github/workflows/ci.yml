name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run CI daily at 02:00 UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: check-${{ runner.os }}

      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy linting
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: "-D warnings"

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta] # MSRV (Minimum Supported Rust Version)
        exclude:
          # Reduce CI load - only test MSRV on Ubuntu
          - os: macos-latest
            rust: stable
          - os: windows-latest
            rust: stable
          # Beta testing only on Ubuntu
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure git for tests
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.os }}-${{ matrix.rust }}

      - name: Build project
        run: cargo build --verbose --all-features

      - name: Run unit tests
        run: cargo test --verbose --all-features

      - name: Run integration tests
        run: cargo test --verbose --test integration_test

      - name: Run property-based tests
        run: cargo test --verbose --test property_based_tests
        continue-on-error: true # Property tests can be flaky

      - name: Test without default features
        run: cargo test --verbose --no-default-features

  cross-compile:
    name: Cross Compilation
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update
          # Install ARM64 cross-compilation toolchain for GNU targets
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
          # Install musl tools for x86_64 musl target
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            sudo apt-get install -y musl-tools
          fi

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: cross-${{ matrix.target }}

      - name: Build for target
        env:
          # Set linker for ARM64 GNU target
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          # Set linker for x86_64 musl target
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: musl-gcc
          # Tell cargo to use static linking for musl
          RUSTFLAGS: "-C target-feature=+crt-static"
        run: |
          # Export PATH to ensure cargo is available in act
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo build --release --target ${{ matrix.target }} --all-features

      - name: Test for target (if supported)
        # Only run tests for native x86_64 target
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo test --release --target ${{ matrix.target }}

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: bench-${{ runner.os }}

      - name: Run benchmarks
        run: cargo bench --no-run # Build benchmarks without running (for CI speed)

      - name: Run lightweight benchmark
        run: timeout 300 cargo bench || echo "Benchmarks completed or timed out"

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure git for tests
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: coverage-${{ runner.os }}

      - name: Generate coverage report
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          fail_ci_if_error: true
          verbose: true
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build optimized release binaries for major platforms
  release-build:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dotman-x86_64-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: dotman-x86_64-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: dotman-aarch64-linux-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # Install ARM64 cross-compilation toolchain for GNU targets
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
          # Install musl tools for x86_64 musl target
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            sudo apt-get install -y musl-tools
          fi

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}

      - name: Build release binary
        env:
          # Set linker for ARM64 GNU target
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          # Set linker for x86_64 musl target
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: musl-gcc
          # Tell cargo to use static linking for musl
          RUSTFLAGS: "-C target-feature=+crt-static"
        run: |
          # Export PATH to ensure cargo is available in act
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo build --release --target ${{ matrix.target }} --all-features
          cp target/${{ matrix.target }}/release/dot ${{ matrix.artifact_name }}

      - name: Strip binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          # Use the appropriate strip tool for each target
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            # Use cross-platform strip for ARM64
            aarch64-linux-gnu-strip ${{ matrix.artifact_name }}
          elif [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            # musl binaries can use regular strip
            strip ${{ matrix.artifact_name }}
          else
            # Regular strip for native builds
            strip ${{ matrix.artifact_name }}
          fi

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}
          retention-days: 7

  # Comprehensive check that all CI jobs passed
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [check, test, cross-compile]
    if: always()

    steps:
      - name: Check all jobs success
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1

      - name: CI Success
        run: echo "All CI checks passed successfully!"

